// Generated by gencpp from file asr_navfn/SetCostmapRequest.msg
// DO NOT EDIT!


#ifndef ASR_NAVFN_MESSAGE_SETCOSTMAPREQUEST_H
#define ASR_NAVFN_MESSAGE_SETCOSTMAPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace asr_navfn
{
template <class ContainerAllocator>
struct SetCostmapRequest_
{
  typedef SetCostmapRequest_<ContainerAllocator> Type;

  SetCostmapRequest_()
    : costs()
    , height(0)
    , width(0)  {
    }
  SetCostmapRequest_(const ContainerAllocator& _alloc)
    : costs(_alloc)
    , height(0)
    , width(0)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _costs_type;
  _costs_type costs;

   typedef uint16_t _height_type;
  _height_type height;

   typedef uint16_t _width_type;
  _width_type width;





  typedef boost::shared_ptr< ::asr_navfn::SetCostmapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::asr_navfn::SetCostmapRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetCostmapRequest_

typedef ::asr_navfn::SetCostmapRequest_<std::allocator<void> > SetCostmapRequest;

typedef boost::shared_ptr< ::asr_navfn::SetCostmapRequest > SetCostmapRequestPtr;
typedef boost::shared_ptr< ::asr_navfn::SetCostmapRequest const> SetCostmapRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::asr_navfn::SetCostmapRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::asr_navfn::SetCostmapRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::asr_navfn::SetCostmapRequest_<ContainerAllocator1> & lhs, const ::asr_navfn::SetCostmapRequest_<ContainerAllocator2> & rhs)
{
  return lhs.costs == rhs.costs &&
    lhs.height == rhs.height &&
    lhs.width == rhs.width;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::asr_navfn::SetCostmapRequest_<ContainerAllocator1> & lhs, const ::asr_navfn::SetCostmapRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace asr_navfn

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::asr_navfn::SetCostmapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asr_navfn::SetCostmapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::asr_navfn::SetCostmapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::asr_navfn::SetCostmapRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asr_navfn::SetCostmapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asr_navfn::SetCostmapRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::asr_navfn::SetCostmapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "370ec969cdb71f9cde7c7cbe0d752308";
  }

  static const char* value(const ::asr_navfn::SetCostmapRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x370ec969cdb71f9cULL;
  static const uint64_t static_value2 = 0xde7c7cbe0d752308ULL;
};

template<class ContainerAllocator>
struct DataType< ::asr_navfn::SetCostmapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "asr_navfn/SetCostmapRequest";
  }

  static const char* value(const ::asr_navfn::SetCostmapRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::asr_navfn::SetCostmapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] costs\n"
"uint16 height\n"
"uint16 width\n"
;
  }

  static const char* value(const ::asr_navfn::SetCostmapRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::asr_navfn::SetCostmapRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.costs);
      stream.next(m.height);
      stream.next(m.width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetCostmapRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::asr_navfn::SetCostmapRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::asr_navfn::SetCostmapRequest_<ContainerAllocator>& v)
  {
    s << indent << "costs[]" << std::endl;
    for (size_t i = 0; i < v.costs.size(); ++i)
    {
      s << indent << "  costs[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.costs[i]);
    }
    s << indent << "height: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASR_NAVFN_MESSAGE_SETCOSTMAPREQUEST_H
